/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.mikan.sample.qiita.model

import io.github.mikan.sample.qiita.model.Group
import io.github.mikan.sample.qiita.model.ItemTag
import io.github.mikan.sample.qiita.model.ItemTeamMembership
import io.github.mikan.sample.qiita.model.User

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param renderedBody HTML形式の本文
 * @param body Markdown形式の本文
 * @param coediting この記事が共同更新状態かどうか (Qiita Teamでのみ有効)
 * @param commentsCount この記事へのコメントの数
 * @param createdAt データが作成された日時
 * @param id 記事の一意なID
 * @param likesCount この記事への「いいね」の数（Qiitaでのみ有効）
 * @param `private` 限定共有状態かどうかを表すフラグ (Qiita Teamでは無効)
 * @param reactionsCount 絵文字リアクションの数（Qiita Teamでのみ有効）
 * @param stocksCount この記事がストックされた数
 * @param tags 記事に付いたタグ一覧
 * @param title 記事のタイトル
 * @param updatedAt データが最後に更新された日時
 * @param url 記事のURL
 * @param user 
 * @param pageViewsCount 閲覧数
 * @param slide スライドモードが有効を表すフラグ
 * @param organizationUrlName 記事のOrganization の url_name を表します。
 * @param group 
 * @param teamMembership 
 */
@Serializable

data class Item (

    /* HTML形式の本文 */
    @SerialName(value = "rendered_body") @Required val renderedBody: kotlin.String,

    /* Markdown形式の本文 */
    @SerialName(value = "body") @Required val body: kotlin.String,

    /* この記事が共同更新状態かどうか (Qiita Teamでのみ有効) */
    @SerialName(value = "coediting") @Required val coediting: kotlin.Boolean,

    /* この記事へのコメントの数 */
    @SerialName(value = "comments_count") @Required val commentsCount: kotlin.Int,

    /* データが作成された日時 */
    @SerialName(value = "created_at") @Required val createdAt: kotlin.String,

    /* 記事の一意なID */
    @SerialName(value = "id") @Required val id: kotlin.String,

    /* この記事への「いいね」の数（Qiitaでのみ有効） */
    @SerialName(value = "likes_count") @Required val likesCount: kotlin.Int,

    /* 限定共有状態かどうかを表すフラグ (Qiita Teamでは無効) */
    @SerialName(value = "private") @Required val `private`: kotlin.Boolean,

    /* 絵文字リアクションの数（Qiita Teamでのみ有効） */
    @SerialName(value = "reactions_count") @Required val reactionsCount: kotlin.Int,

    /* この記事がストックされた数 */
    @SerialName(value = "stocks_count") @Required val stocksCount: kotlin.Int,

    /* 記事に付いたタグ一覧 */
    @SerialName(value = "tags") @Required val tags: kotlin.collections.List<ItemTag>,

    /* 記事のタイトル */
    @SerialName(value = "title") @Required val title: kotlin.String,

    /* データが最後に更新された日時 */
    @SerialName(value = "updated_at") @Required val updatedAt: kotlin.String,

    /* 記事のURL */
    @SerialName(value = "url") @Required val url: kotlin.String,

    @SerialName(value = "user") @Required val user: User,

    /* 閲覧数 */
    @SerialName(value = "page_views_count") @Required val pageViewsCount: kotlin.Int?,

    /* スライドモードが有効を表すフラグ */
    @SerialName(value = "slide") @Required val slide: kotlin.Boolean,

    /* 記事のOrganization の url_name を表します。 */
    @SerialName(value = "organization_url_name") @Required val organizationUrlName: kotlin.String?,

    @SerialName(value = "group") val group: Group? = null,

    @SerialName(value = "team_membership") val teamMembership: ItemTeamMembership? = null

) {


}

