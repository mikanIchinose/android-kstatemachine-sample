/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.github.mikan.sample.qiita.remote

import io.github.mikan.sample.qiita.model.AuthenticatedUser
import io.github.mikan.sample.qiita.model.Comment
import io.github.mikan.sample.qiita.model.CreateCommentRequest
import io.github.mikan.sample.qiita.model.CreateItemRequest
import io.github.mikan.sample.qiita.model.IssueAccessTokenRequest
import io.github.mikan.sample.qiita.model.Item
import io.github.mikan.sample.qiita.model.LikeHistory
import io.github.mikan.sample.qiita.model.UpdateCommentRequest
import io.github.mikan.sample.qiita.model.UpdateItemRequest
import io.github.mikan.sample.qiita.model.User

import io.github.mikan.sample.qiita.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class UserApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Create comment
     * 記事に対してコメントを投稿します。
     * @param itemId Article ID
     * @param createCommentRequest  (optional)
     * @return Comment
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createComment(itemId: kotlin.String, createCommentRequest: CreateCommentRequest? = null): HttpResponse<Comment> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = createCommentRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v2/items/{item_id}/comments".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Create item
     * 新たに記事を作成します。  Create a new article.
     * @param createItemRequest  (optional)
     * @return Item
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun createItem(createItemRequest: CreateItemRequest? = null): HttpResponse<Item> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = createItemRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v2/items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Create item like
     * Qiita TeamのいいねAPIは2020年11月4日より廃止となりました。今後は絵文字リアクションAPIをご利用ください。 記事に「いいね」を付けます。
     * @param itemId Article ID
     * @return void
     */
    open suspend fun createItemLike(itemId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/api/v2/items/{item_id}/like".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Create item stock
     * 記事をストックします。
     * @param itemId Article ID
     * @return void
     */
    open suspend fun createItemStock(itemId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/api/v2/items/{item_id}/stock".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 指定されたアクセストークンを失効させ、それ以降利用できないようにします。 
     * @param accessToken アクセストークンを表現する文字列
     * @return void
     */
    open suspend fun deleteApiV2AccessTokensAccessToken(accessToken: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/v2/access_tokens/{access_token}".replace("{" + "access_token" + "}", "$accessToken"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete comment
     * コメントを削除します。
     * @param commentId コメントの一意なID
     * @return void
     */
    open suspend fun deleteComment(commentId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/v2/comments/{comment_id}".replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get item stockers
     * 記事を削除します。
     * @param itemId Article ID
     * @return void
     */
    open suspend fun deleteItem(itemId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/v2/items/{item_id}".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete item like
     * Qiita TeamのいいねAPIは2020年11月4日より廃止となりました。今後は絵文字リアクションAPIをご利用ください。 記事への「いいね」を取り消します。
     * @param itemId Article ID
     * @return void
     */
    open suspend fun deleteItemLike(itemId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/v2/items/{item_id}/like".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Delete item stock
     * 記事をストックから取り除きます。
     * @param itemId Article ID
     * @return void
     */
    open suspend fun deleteItemStock(itemId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/v2/items/{item_id}/stock".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Follow
     * ユーザーをフォローします。
     * @param userId ユーザーID
     * @return void
     */
    open suspend fun follow(userId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/api/v2/users/{user_id}/following".replace("{" + "user_id" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get authenticated user
     * アクセストークンに紐付いたユーザーを返します。
     * @return AuthenticatedUser
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAuthenticatedUser(): HttpResponse<AuthenticatedUser> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/authenticated_user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get authenticated user items
     * 認証中のユーザーの記事の一覧を作成日時の降順で返します。
     * @param page ページ番号 (1から100まで) (optional)
     * @param perPage 1ページあたりに含まれる要素数 (1から100まで) (optional)
     * @return Item
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getAuthenticatedUserItems(page: kotlin.Int? = null, perPage: kotlin.Int? = null): HttpResponse<Item> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/authenticated_user/items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get comment
     * コメントを取得します。
     * @param commentId コメントの一意なID
     * @return Comment
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getComment(commentId: kotlin.String): HttpResponse<Comment> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/comments/{comment_id}".replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get item
     * 記事を取得します。
     * @param itemId Article ID
     * @return Item
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getItem(itemId: kotlin.String): HttpResponse<Item> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/items/{item_id}".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get item comments
     * 投稿に付けられたコメント一覧を投稿日時の降順で取得します。
     * @param itemId Article ID
     * @return kotlin.collections.List<Comment>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getItemComments(itemId: kotlin.String): HttpResponse<kotlin.collections.List<Comment>> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/items/{item_id}/comments".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetItemCommentsResponse>().map { value }
    }

    @Serializable(GetItemCommentsResponse.Companion::class)
    private class GetItemCommentsResponse(val value: List<Comment>) {
        companion object : KSerializer<GetItemCommentsResponse> {
            private val serializer: KSerializer<List<Comment>> = serializer<List<Comment>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetItemCommentsResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetItemCommentsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get item likes
     * Qiita TeamのいいねAPIは2020年11月4日より廃止となりました。今後は絵文字リアクションAPIをご利用ください。  記事につけられた「いいね」を作成日時の降順で返します。
     * @param itemId Article ID
     * @return kotlin.collections.List<LikeHistory>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getItemLikes(itemId: kotlin.String): HttpResponse<kotlin.collections.List<LikeHistory>> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/items/{item_id}/likes".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetItemLikesResponse>().map { value }
    }

    @Serializable(GetItemLikesResponse.Companion::class)
    private class GetItemLikesResponse(val value: List<LikeHistory>) {
        companion object : KSerializer<GetItemLikesResponse> {
            private val serializer: KSerializer<List<LikeHistory>> = serializer<List<LikeHistory>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetItemLikesResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetItemLikesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get item stockers
     * 記事をストックしているユーザー一覧を、ストックした日時の降順で返します。
     * @param itemId Article ID
     * @param page ページ番号 (1から100まで) (optional)
     * @param perPage 1ページあたりに含まれる要素数 (1から100まで) (optional)
     * @return kotlin.collections.List<User>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getItemStockers(itemId: kotlin.String, page: kotlin.Int? = null, perPage: kotlin.Int? = null): HttpResponse<kotlin.collections.List<User>> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/items/{item_id}/stockers".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetItemStockersResponse>().map { value }
    }

    @Serializable(GetItemStockersResponse.Companion::class)
    private class GetItemStockersResponse(val value: List<User>) {
        companion object : KSerializer<GetItemStockersResponse> {
            private val serializer: KSerializer<List<User>> = serializer<List<User>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetItemStockersResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetItemStockersResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get items
     * 記事の一覧を作成日時の降順で返します。
     * @param page ページ番号 (1から100まで) (optional)
     * @param perPage 1ページあたりに含まれる要素数 (1から100まで) (optional)
     * @param query 検索クエリ (optional)
     * @return kotlin.collections.List<Item>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getItems(page: kotlin.Int? = null, perPage: kotlin.Int? = null, query: kotlin.String? = null): HttpResponse<kotlin.collections.List<Item>> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
        query?.apply { localVariableQuery["query"] = listOf("$query") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetItemsResponse>().map { value }
    }

    @Serializable(GetItemsResponse.Companion::class)
    private class GetItemsResponse(val value: List<Item>) {
        companion object : KSerializer<GetItemsResponse> {
            private val serializer: KSerializer<List<Item>> = serializer<List<Item>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetItemsResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetItemsResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get OAuth authorize
     * read_qiita_team、write_qiita_teamを使う場合、authorizeページによる認証認可は2020年6月5日に非推奨となりました。今後はご利用されるチームのホストでteam_authorizeをご利用ください。 アクセストークンを発行するには、アプリケーションのユーザーに認可画面を表示する必要があります。ユーザーがアプリケーションからのアクセスを認可すると、アプリケーション登録時に指定されたURLにリダイレクトされます。このとき、リダイレクト先のURLクエリにcodeが付与されます。また指定した場合は state も付与されます。アプリケーションでは、この code の値を利用して POST /api/v2/access_tokens にリクエストを送り、アクセストークンを発行します。
     * @param clientId 登録されたAPIクライアントを特定するためのIDです。40桁の16進数で表現されます。
     * @param scope アプリケーションが利用するスコープをスペース区切りで指定できます。
     * @param state CSRF対策のため、認可後にリダイレクトするURLのクエリに含まれる値を指定できます。
     * @return void
     */
    open suspend fun getOauthAuthorize(clientId: kotlin.String, scope: kotlin.String, state: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        clientId?.apply { localVariableQuery["client_id"] = listOf("$clientId") }
        scope?.apply { localVariableQuery["scope"] = listOf("$scope") }
        state?.apply { localVariableQuery["state"] = listOf("$state") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/oauth/authorize",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get user
     * ユーザーを取得します。
     * @param userId ユーザーID
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUser(userId: kotlin.String): HttpResponse<User> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/users/{user_id}".replace("{" + "user_id" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get user followees
     * ユーザーがフォローしているユーザー一覧を取得します。
     * @param userId ユーザーID
     * @param page ページ番号 (1から100まで) (optional)
     * @param perPage 1ページあたりに含まれる要素数 (1から100まで) (optional)
     * @return kotlin.collections.List<User>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUserFollowees(userId: kotlin.String, page: kotlin.Int? = null, perPage: kotlin.Int? = null): HttpResponse<kotlin.collections.List<User>> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/users/{user_id}/followees".replace("{" + "user_id" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetUserFolloweesResponse>().map { value }
    }

    @Serializable(GetUserFolloweesResponse.Companion::class)
    private class GetUserFolloweesResponse(val value: List<User>) {
        companion object : KSerializer<GetUserFolloweesResponse> {
            private val serializer: KSerializer<List<User>> = serializer<List<User>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetUserFolloweesResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetUserFolloweesResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get user followers
     * ユーザーをフォローしているユーザー一覧を取得します。
     * @param userId ユーザーID
     * @param page ページ番号 (1から100まで) (optional)
     * @param perPage 1ページあたりに含まれる要素数 (1から100まで) (optional)
     * @return kotlin.collections.List<User>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUserFollowers(userId: kotlin.String, page: kotlin.Int? = null, perPage: kotlin.Int? = null): HttpResponse<kotlin.collections.List<User>> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/users/{user_id}/followers".replace("{" + "user_id" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetUserFollowersResponse>().map { value }
    }

    @Serializable(GetUserFollowersResponse.Companion::class)
    private class GetUserFollowersResponse(val value: List<User>) {
        companion object : KSerializer<GetUserFollowersResponse> {
            private val serializer: KSerializer<List<User>> = serializer<List<User>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetUserFollowersResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetUserFollowersResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Get users
     * 全てのユーザーの一覧を作成日時の降順で取得します。
     * @param page ページ番号 (1から100まで) (optional)
     * @param perPage 1ページあたりに含まれる要素数 (1から100まで) (optional)
     * @return kotlin.collections.List<User>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUsers(page: kotlin.Int? = null, perPage: kotlin.Int? = null): HttpResponse<kotlin.collections.List<User>> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<GetUsersResponse>().map { value }
    }

    @Serializable(GetUsersResponse.Companion::class)
    private class GetUsersResponse(val value: List<User>) {
        companion object : KSerializer<GetUsersResponse> {
            private val serializer: KSerializer<List<User>> = serializer<List<User>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, value: GetUsersResponse) = serializer.serialize(encoder, value.value)
            override fun deserialize(decoder: Decoder) = GetUsersResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Is item like
     * Qiita TeamのいいねAPIは2020年11月4日より廃止となりました。今後は絵文字リアクションAPIをご利用ください。 記事に「いいね」を付けているかどうかを調べます。
     * @param itemId Article ID
     * @return void
     */
    open suspend fun isItemLike(itemId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/items/{item_id}/like".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Is item stock
     * 記事をストックしているかどうかを調べます。
     * @param itemId Article ID
     * @return void
     */
    open suspend fun isItemStock(itemId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/items/{item_id}/stock".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Is user following
     * ユーザーをフォローしている場合に204を返します。
     * @param userId ユーザーID
     * @return void
     */
    open suspend fun isUserFollowing(userId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/api/v2/users/{user_id}/following".replace("{" + "user_id" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Issue access token
     * 与えられた認証情報をもとに新しいアクセストークンを発行します。
     * @param issueAccessTokenRequest  (optional)
     * @return void
     */
    open suspend fun issueAccessTokens(issueAccessTokenRequest: IssueAccessTokenRequest? = null): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = issueAccessTokenRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/api/v2/access_tokens",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Unfollow
     * ユーザーへのフォローを外します。
     * @param userId ユーザーID
     * @return void
     */
    open suspend fun unfollow(userId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/api/v2/users/{user_id}/following".replace("{" + "user_id" + "}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Update comment
     * コメントを更新します。
     * @param commentId コメントの一意なID
     * @param updateCommentRequest  (optional)
     * @return Comment
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateComment(commentId: kotlin.String, updateCommentRequest: UpdateCommentRequest? = null): HttpResponse<Comment> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = updateCommentRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/api/v2/comments/{comment_id}".replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 記事を更新します。
     * @param itemId Article ID
     * @param updateItemRequest  (optional)
     * @return Item
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun updateItem(itemId: kotlin.String, updateItemRequest: UpdateItemRequest? = null): HttpResponse<Item> {

        val localVariableAuthNames = listOf<String>("Bearer")

        val localVariableBody = updateItemRequest

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/api/v2/items/{item_id}".replace("{" + "item_id" + "}", "$itemId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
